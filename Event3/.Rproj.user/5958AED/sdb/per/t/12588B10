{
    "contents" : "source(\"../../../R/AZ Functions.R\")\nlibrary(rpart)\nlibrary(rpart.plot)\nlibrary(randomForest)\nlibrary(e1071)\nlibrary(caret)\nlibrary(pROC)\nlibrary(ROCR)\n\n## Lending club default prediction\n\nloan.stats <- function() {\n  \n  dir <- \"Lending Club Data/\"\n  files <- list.files(dir, full.names = T)\n  l.stats <- files[str_detect(files, ignore.case(\"loanstats\"))]\n  \n  list.stats <- lapply(l.stats, \n                       function(x) \n                         read.csv(x, skip = 1, header = T, \n                                  stringsAsFactors = F))\n  \n  l.stats <- gsub(dir, \"\", l.stats)\n  names(list.stats) <- l.stats\n  \n  return(ldply(list.stats))\n  \n}\n\nloan.stats.df <- loan.stats()\n\nedit.lstats <- function(lstats = loan.stats.df) {\n  \n  lstats$loan_status <- ifelse(str_detect(lstats$loan_status, \"Status\"), \n                               substr(lstats$loan_status, \n                                      str_locate(lstats$loan_status, \"Status:\")[[2]] + 1,\n                                      nchar(lstats$loan_status)),\n                               lstats$loan_status)\n  \n  return(lstats)\n}\n\nggplot(ddply(subset(loan.stats.df, !is.na(loan_status)), .(grade, loan_status), summarise, NLoans = nrow(piece), Total.Amount = sum(loan_amnt, na.rm = T), .progress = 'text'))\n\n\nrun.model <- function(lstats = loan.stats.df) {\n  \n  cat.predictors <- c(\"grade\", \"home_ownership\", \"emp_length\", \"purpose\", \"is_inc_v\")\n  cts.predictors <- c(\"annual_inc\", \"dti\", \"loan_amnt\", \"int_rate\")\n  \n  lstats$loan_def <- ifelse(lstats$loan_status %in% c(\"Charged Off\",\n                                                       \"Default\"), 1, 0)\n  lstats$loan_def <- ifelse(str_detect(lstats$loan_status, \"Late\"),\n                            1, lstats$loan_def)\n  \n  lstats$int_rate <- as.numeric(gsub(\"%\", \"\", lstats$int_rate))\n  \n  return(lstats[, c(cat.predictors, cts.predictors, \"loan_def\", \"loan_status\")])\n  \n}\n\nsplit.data <- function(data, train.size = 0.5) {\n  \n  train.rows <- sample(1:nrow(data), size = floor(nrow(data)/2), replace = F)\n  train.data <- data[train.rows, ]\n  test.data  <- data[!(1:nrow(data) %in% train.rows), ]\n  \n  list.data <- list(\"Train\" = train.data, \"Test\" = test.data)\n  \n  return(list.data)\n  \n}\n\n\ntrain.tree <- function(tree.data) {\n  \n  fol <- formula(loan_def ~ grade + home_ownership + is_inc_v +\n                   emp_length + purpose + annual_inc +\n                   dti + loan_amnt)\n  mod <- rpart(fol, method = 'class', data = tree.data,\n               control = rpart.control(minbucket = 1, minsplit = 1, \n                                       cp = -2, xval = 0, \n                                       maxdepth = 3))\n  \n  return(mod)\n}\n\n\ntrain.glm <- function(tree.data) {\n  \n  fol <- formula(loan_def ~ grade + home_ownership + is_inc_v +\n                   emp_length + purpose + annual_inc +\n                   dti + loan_amnt)\n  mod <- glm(fol, family = 'binomial', data = tree.data)\n  \n  return(mod)\n}\n\npredict.tree <- function(train.model = train.tree(loans.split[[\"Train\"]]),\n                         test.data = loans.split[[\"Test\"]]) {\n  \n  train.model <- train.model\n  test.predic <- predict(train.model, newdata = test.data, type = 'class',\n                         control = rpart.control(minbucket = 1, minsplit = 1, \n                                                 cp = -2, xval = 0, \n                                                 maxdepth = 3))\n  \n  return(test.predic)\n  \n}\n\n\ntrain.forest <- function(for.data = loans.split[[\"Train\"]]) {\n  \n  fol <- formula(factor(loan_def) ~ grade + home_ownership +\n                   emp_length + purpose + is_inc_v + annual_inc +\n                   dti + loan_amnt)\n  forest <- randomForest(fol, data = for.data, \n                         type = 'classification', importance = T)\n  \n  return(forest)\n  \n}\n\nresults <- function(test = predict.tree(),\n                    test.data = loans.split$Test,\n                    response = \"loan_def\") {\n  \n  cross.tab.tree <- table(test, test.data[, response])\n  \n  correct <- sum(diag(cross.tab.tree))/nrow(test.data)\n  \n  return(correct)\n}\n\ntrain.svm <- function(for.data = loans.split[[\"Train\"]]) {\n  \n  fol <- formula(factor(loan_def) ~ grade + home_ownership + int_rate +\n                   emp_length + purpose + is_inc_v + annual_inc +\n                   dti + loan_amnt)\n  svm.model <- svm(fol, data = for.data)\n  \n  return(svm.model)\n  \n}\n\n\ntrain.boost <- function(train.data = loans.split$Train) {\n  \n  fol <- formula(factor(loan_def) ~ factor(grade) + factor(grade) + factor(grade) +\n                   factor(grade) + factor(purpose) + annual_inc +\n                   dti + loan_amnt,\n                 control = rpart.control(minsplit = 0))\n  \n  loans.adaboost <- gbm(fol, data = train.data, \n                        distribution = 'adaboost')\n  \n  return(loans.adaboost)\n  \n}\n\n\ndata.edit <- function(loans.data = lstats.x) {\n  \n  loans.data$home_own <- ifelse(loans.data$home_ownership %in% c(\"OWN\", \"MORTGAGE\"),\n                                1, 0)\n  \n  loans.data$employed <- ifelse(loans.data$emp_length %in% c(\"<1 year\", \"n/a\"),\n                                0, 1)\n  loans.data$small.biz <- ifelse(loans.data$purpose == \"small_business\", 1, 0)\n  \n  loans.data$verify <- ifelse(loans.data$is_inc_v %in% c(\"Verified\", \"Source Verified\"),\n                              1, 0)\n  loans.data$high.grade <- ifelse(loans.data$grade %in% c(\"A\", \"B\"), \n                                  1, 0)\n  \n  return(loans.data[, c(\"high.grade\", \"verify\", \"small.biz\", \"employed\", \n                        \"home_own\", \"int_rate\", \"loan_amnt\", \"dti\", \"annual_inc\",\n                        \"loan_def\")])\n  \n}\n\nrun.forest <- function(lstats = data.edit()) {\n  \n  splits <- split.data(lstats)\n  rf <- randomForest(factor(loan_def) ~ ., \n                     data = splits$Train, importance = T, na.action = na.omit)\n  \n  return(rf)\n}\n\nforest.results <- function(lstats = data.edit()) {\n  \n  \n  splits <- split.data(lstats)\n  model <- run.forest()\n  predictions <- predict(run.forest(), splits$Test, type = 'class')\n  \n  table.preds <- table(predictions, splits$Test[, 'loan_def'])\n  \n  return(table.preds)\n  \n}\n\npred.forest <- predict(run.forest(), splits.loans.bin$Test, type = 'class')\nperformance(prediction(as.numeric(as.character(pred.forest)), splits.loans.bin$Test$loan_def), 'tpr', 'fpr')\nprob.forest.pred <- predict(run.forest(), splits.loans.bin$Test, type = 'prob')\n\nplot(performance(prediction(prob.forest.pred[, 2], splits.loans.bin$Test$loan_def), \"tpr\", \"fpr\"), main = \"ROC for Random Forest Default Prediction\", col = 2, lwd = 2)\n\n\ny <- (performance(prediction(prob.forest.pred[, 2], splits.loans.bin$Test$loan_def), \"tpr\", \"fpr\"))\nydf <- (data.frame(\"TPR\" =  y@x.values, \"FPR\" = y@y.values))\n\n## for svms  use predict(svm.fit, newdata, probability = T)\n## and extract using attr(prob.svm.pred, \"prob\")",
    "created" : 1410047253261.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "856266913",
    "id" : "12588B10",
    "lastKnownWriteTime" : 1410237038,
    "path" : "D:/Dropbox/Projects/NYC Datascience Group/Event3/1. Lending Club.R",
    "project_path" : "1. Lending Club.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}