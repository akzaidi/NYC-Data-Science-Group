results()
train.svm <- function(for.data = loans.split[["Train"]]) {
fol <- formula(factor(loan_def) ~ grade + home_ownership +
emp_length + purpose + is_inc_v + annual_inc +
dti + loan_amnt)
svm.model <- svm(fol, data = for.data)
return(svm.model)
}
train.svm()
results
predict.tree(train.svm())
train.svm.loans <- train.svm()
results
result(predict.tree(train.svm.loans), loans.split$Test)
results(predict.tree(train.svm.loans), loans.split$Test)
results()
train.forest <- function(for.data = loans.split[["Train"]]) {
fol <- formula(factor(loan_def) ~ grade + home_ownership +
emp_length + purpose + is_inc_v + annual_inc +
dti + loan_amnt)
forest <- randomForest(fol, data = for.data)
return(forest)
}
train.forest()
ls()
head(lstats.x)
head(loans.split$Train)
table(loans.over$loan_status)
table(lstats.x$loan_def)
nrow(lstats.x$loan_amnt)-2178
nrow(lstats.x)-2178
17338/nrow(lstats.x)
results()
results() - (17338/nrow(lstats.x))
head(lstats.x)
sample(5, size = 3)
head(lstats.x)
ggplot(lstats.x, aes(x = int_rate, y = loan_def)) + geom_point()
run.model <- function(lstats = loan.stats.df) {
cat.predictors <- c("grade", "home_ownership", "emp_length", "purpose", "is_inc_v")
cts.predictors <- c("annual_inc", "dti", "loan_amnt", "int_rate")
lstats$loan_def <- ifelse(lstats$loan_status %in% c("Charged Off",
"Default"), 1, 0)
lstats$loan_def <- ifelse(str_detect(lstats$loan_status, "Late"),
1, lstats$loan_def)
lstats$int_rate <- as.numeric(gsub("%", "", lstats$int_rate))
return(lstats[, c(cat.predictors, cts.predictors, "loan_def", "loan_status")])
}
lstats.x <- run.model()
lstats.x <- run.model(loans.over)
loans.split <- split.data(run.model(loans.over))
results()
ls()
train.svm.loans <- train.svm()
train.svm <- function(for.data = loans.split[["Train"]]) {
fol <- formula(factor(loan_def) ~ grade + home_ownership + int_rate +
emp_length + purpose + is_inc_v + annual_inc +
dti + loan_amnt)
svm.model <- svm(fol, data = for.data)
return(svm.model)
}
train.svm.loans <- train.svm()
results(predict.tree(train.svm.loans), loans.split$Test)
results(loans.split, loans.split$Test)
predict.tree(train.svm.loans)
train.svm.loans
predict.tree(train.svm.loans, loans.split$Test)
predict(train.svm.loans)
length(predict(train.svm))
length(predict(train.svm.loans))
nrow(loans.split$Test)
predict(train.svm.loans, loans.split$Test, type = 'class')
head(lstats.x)
loans.split <- split.data(lstats.x)
predict(train.svm.loans, loans.split$Test, type = 'class')
results(predict(train.svm.loans, loans.split$Test, type = 'class'), loans.split$Test)
install.packages('adaboost')
library(adaboost)
install.packages('adabag')
library(adabag)
train.boost <- function(test.data = loans.split$Train) {
fol <- formula(factor(loan_def) ~ grade + home_ownership + int_rate +
emp_length + purpose + is_inc_v + annual_inc +
dti + loan_amnt)
loans.adaboost <- boosting(fol, data=iris, boos=TRUE, mfinal=10)
return(loans.adaboost)
}
train.boost()
train.boost <- function(train.data = loans.split$Train) {
fol <- formula(factor(loan_def) ~ grade + home_ownership + int_rate +
emp_length + purpose + is_inc_v + annual_inc +
dti + loan_amnt)
loans.adaboost <- boosting(fol, data = train.data, boos=TRUE, mfinal=10)
return(loans.adaboost)
}
train.boost()
train.boost <- function(train.data = loans.split$Train) {
fol <- formula(factor(loan_def) ~ grade + home_ownership + int_rate +
emp_length + purpose + is_inc_v + annual_inc +
dti + loan_amnt)
loans.adaboost <- boosting(fol, data = train.data, boost=TRUE, mfinal=10)
return(loans.adaboost)
}
train.boost()
train.boost <- function(train.data = loans.split$Train) {
fol <- formula(loan_def ~ grade + home_ownership + is_inc_v +
emp_length + purpose + annual_inc +
dti + loan_amnt)
loans.adaboost <- boosting(fol, data = train.data, boos = TRUE, mfinal=10)
return(loans.adaboost)
}
train.boost()
train.boost <- function(train.data = loans.split$Train) {
fol <- formula(loan_def ~ grade + home_ownership + is_inc_v +
emp_length + purpose + annual_inc +
dti + loan_amnt,
control = rpart.control(minbucket = 1, minsplit = 1,
maxdepth = 3)))
loans.adaboost <- boosting(fol, data = train.data, boos = TRUE, mfinal=10)
return(loans.adaboost)
}
train.boost <- function(train.data = loans.split$Train) {
fol <- formula(loan_def ~ grade + home_ownership + is_inc_v +
emp_length + purpose + annual_inc +
dti + loan_amnt,
control = rpart.control(minbucket = 1, minsplit = 1,
maxdepth = 3))
loans.adaboost <- boosting(fol, data = train.data, boos = TRUE, mfinal=10)
return(loans.adaboost)
}
train.boost()
train.boost <- function(train.data = loans.split$Train) {
fol <- formula(factor(loan_def) ~ grade + home_ownership + is_inc_v +
emp_length + purpose + annual_inc +
dti + loan_amnt,
control = rpart.control(minbucket = 1, minsplit = 1,
maxdepth = 3))
loans.adaboost <- boosting(fol, data = train.data, boos = TRUE, mfinal=10)
return(loans.adaboost)
}
train.boost()
head(loans.split$Train)
train.boost <- function(train.data = loans.split$Train) {
fol <- formula(factor(loan_def) ~ grade + home_ownership + is_inc_v +
emp_length + purpose + annual_inc +
dti + loan_amnt,
control = rpart.control(minbucket = 1, minsplit = 1,
maxdepth = 3))
loans.adaboost <- boosting(fol, data = train.data, boos = TRUE, mfinal=10)
return(loans.adaboost)
}
train.boost()
train.boost()
loans.split$Train[, c("grade ","home_ownership" ,"is_inc_v"
"emp_length ","purpose" ,"annual_inc",
"dti" ,"loan_amnt")]
loans.split$Train[, c("grade ","home_ownership" ,"is_inc_v",
"emp_length ","purpose" ,"annual_inc",
"dti" ,"loan_amnt")]
head(loans.split$Train)
loans.split$Train[, c("grade ","home_ownership" ,"is_inc_v",
"emp_length","purpose" ,"annual_inc",
"dti" ,"loan_amnt")]
loans.split$Train[, c("grade","home_ownership" ,"is_inc_v",
"emp_length","purpose" ,"annual_inc",
"dti" ,"loan_amnt")]
train.boost <- function(train.data = loans.split$Train) {
fol <- formula(factor(loan_def) ~ grade + home_ownership + is_inc_v +
emp_length + purpose + annual_inc +
dti + loan_amnt,
control = rpart.control(minbucket = 1, minsplit = 1,
maxdepth = 3))
loans.adaboost <- boosting(fol, data = train.data, boos = TRUE, mfinal=10)
return(loans.adaboost)
}
train.boost()
train.boost <- function(train.data = loans.split$Train) {
fol <- formula(factor(loan_def) ~ factor(grade) + factor(grade) + factor(grade) +
factor(grade) + factor(purpose) + annual_inc +
dti + loan_amnt,
control = rpart.control(minbucket = 1, minsplit = 1,
maxdepth = 3))
loans.adaboost <- boosting(fol, data = train.data, boos = TRUE, mfinal=10)
return(loans.adaboost)
}
train.boost()
x.train <- loans.split$Train
head(x.train)
x.train <- x.train[, 1:ncol(x.train) - 1]
head(x.train)
x.train$loan_def <- factor(x.train$loan_def)
x.boost <- boosting(loan_def ~ ., data = x.train, maxdepth = 3)
x.boost <- boosting(loan_def ~.,data = x.train,mfinal=20, coeflearn="Freund",
boos=FALSE , control=rpart.control(maxdepth=3))
train.boost <- function(train.data = loans.split$Train) {
fol <- formula(factor(loan_def) ~ factor(grade) + factor(grade) + factor(grade) +
factor(grade) + factor(purpose) + annual_inc +
dti + loan_amnt,
control = rpart.control(minbucket = 1, minsplit = 0,
maxdepth = 3))
loans.adaboost <- boosting(fol, data = train.data, boos = TRUE, mfinal=10)
return(loans.adaboost)
}
x.boost <- boosting(loan_def ~.,data = x.train,mfinal=20, coeflearn="Freund",
boos=FALSE , control=rpart.control(maxdepth=3))
train.boost <- function(train.data = loans.split$Train) {
fol <- formula(factor(loan_def) ~ factor(grade) + factor(grade) + factor(grade) +
factor(grade) + factor(purpose) + annual_inc +
dti + loan_amnt,
control = rpart.control(minsplit = 0))
loans.adaboost <- boosting(fol, data = train.data, boos = TRUE, mfinal=10)
return(loans.adaboost)
}
x.boost <- boosting(loan_def ~.,data = x.train,mfinal=20, coeflearn="Freund",
boos=FALSE , control=rpart.control(maxdepth=3))
install.packages('gbm')
library(gbm)
?gbm
train.boost <- function(train.data = loans.split$Train) {
fol <- formula(factor(loan_def) ~ factor(grade) + factor(grade) + factor(grade) +
factor(grade) + factor(purpose) + annual_inc +
dti + loan_amnt,
control = rpart.control(minsplit = 0))
loans.adaboost <- gbm(fol, data = train.data,
distribution = 'bernoulli')
return(loans.adaboost)
}
train.boost()
summary(train.boost())
train.boost <- function(train.data = loans.split$Train) {
fol <- formula(factor(loan_def) ~ factor(grade) + factor(grade) + factor(grade) +
factor(grade) + factor(purpose) + annual_inc +
dti + loan_amnt,
control = rpart.control(minsplit = 0))
loans.adaboost <- gbm(fol, data = train.data,
distribution = 'adaboost')
return(loans.adaboost)
}
summary(train.boost())
(train.boost())
gbm.train <- train.boost()
predict(predict(gbm_algorithm, test_dataset, n.trees = 5000), loans.split$Test, n.trees = 5000)
predict(predict(gbm.train, test_dataset, n.trees = 5000), loans.split$Test, n.trees = 5000)
predict(gbm.train, loans.split$Test, n.trees = 5000)
summary(train.glm())
summary(train.glm(loans.split$Train))
predict.tree(train.glm(tree.data = loans.split$Train), test.data = loans.split$Test)
?predict.glm
predict(object = train.glm(loans.split$Train), newdata = loans.split$Test)
predict(object = train.glm(loans.split$Train), newdata = loans.split$Test, type = 'response')
ifelse(predict(object = train.glm(loans.split$Train), newdata = loans.split$Test, type = 'response')>0.5, 1, 0)
sum(ifelse(predict(object = train.glm(loans.split$Train), newdata = loans.split$Test, type = 'response')>0.5, 1, 0))
head(loans.x)
head(lstats.x)
ggplot(lstats.x, aes(x = log(annual_inc), y = loan_def, colour = grade)) + geom_point()
ggplot(lstats.x, aes(x = log(annual_inc), y = loan_def, colour = grade)) + geom_point() + geom_smooth(method = 'glm', family = 'binomial')
ggplot(lstats.x, aes(x = log(annual_inc), y = log(loan_amnt), colour = grade)) + geom_point()
summary(glm(loan_def ~ grade + home_ownership + emp_length + purpose + is_inc_v + log(annual_inc) + dti + log(loan_amnt) + log(int_rate), data = loans.split$Train, family = 'binomial'))
predict.glm(glm(loan_def ~ grade + home_ownership + emp_length + purpose + is_inc_v + log(annual_inc) + dti + log(loan_amnt) + log(int_rate), data = loans.split$Train, family = 'binomial'), newdata = loans.split$Test)
predict.glm(glm(loan_def ~ grade + home_ownership + emp_length + purpose + is_inc_v + log(annual_inc) + dti + log(loan_amnt) + log(int_rate), data = loans.split$Train, family = 'binomial'), newdata = loans.split$Test, type = 'response')
sum(predict.glm(glm(loan_def ~ grade + home_ownership + emp_length + purpose + is_inc_v + log(annual_inc) + dti + log(loan_amnt) + log(int_rate), data = loans.split$Train, family = 'binomial'), newdata = loans.split$Test, type = 'response')>0.5)
sum(loans.split$Test$loan_def)
3/nrow(loans.split$Test)
head(lstats.x)
table(lstats.x$home_ownership)
table(lstats.x$emp_length)
summary(train.glm(loans.split$Train))
table(lstats.x$loan_def)
2178/nrow(lstats.x)
1 - (2178/nrow(lstats.x))
predict.tree()
sum(predict.tree())
head(predict.tree())
str(predict.tree())
str(as.numeric(predict.tree()))
tree.x <- predict.tree()
test.x <- loans.split$Test
table(tree.x, test.x[, "loan_def"])
predict.tree <- function(train.model = train.tree(loans.split[["Train"]]),
test.data = loans.split[["Test"]]) {
train.model <- train.model
test.predic <- predict(train.model, newdata = test.data, type = 'class',
control = rpart.control(minbucket = 1, minsplit = 1,
cp = -2, xval = 0,
maxdepth = 3))
return(test.predic)
}
tree.x <- predict.tree()
rpart(tree.x)
rpart.plot(tree.x)
test.x <- loans.split$Test
table(tree.x, test.x[, "loan_def"])
prp(tree.x)
plot(tree.x)
predict.tree <- function(train.model = train.tree(loans.split[["Train"]]),
test.data = loans.split[["Test"]]) {
train.model <- train.model
test.predic <- predict(train.model, newdata = test.data, type = 'class',
control = rpart.control(minbucket = 1, minsplit = 1,
cp = -2, xval = 0,
maxdepth = 3))
return(test.predic)
}
tree.x
prp(train.tree(loans.split$Train)
)
train.tree(loans.split$Train)
sum(loans.split$Train$loan_def)
dim(loans.split$Train)
table(loans.split$Train$emp_length)
head(loans.split$Train)
table(loans.split$)
table(loans.split$Train$purpose)
ggplot(loans.split$Train) + geom_bar(aes(x = purpose))
ggplot(loans.split$Train) + geom_bar(aes(x = purpose, y = sum(loan_def)))
ggplot(loans.split$Train) + geom_bar(aes(x = purpose, y = sum(loan_def)), stat = 'identity')
head(loans.split$Train)
randomForest(factor(loan_def) ~ grade + home_ownership +
emp_length + purpose + is_inc_v + is_rent,
type="classification", data=loans.split$Train, importance=TRUE, na.action=na.omit)
randomForest(factor(loan_def) ~ grade + home_ownership +
emp_length + purpose + is_inc_v + log(annual_inc) + log(loan_amnt) + dti,
type="classification", data=loans.split$Train, importance=TRUE, na.action=na.omit)
head(loans.split$Train)
randomForest(factor(loan_def) ~ annual_inc + dti + loan_amnt,
type="classification", data=loans.split$Train, importance=TRUE, na.action=na.omit)
randomForest(factor(loan_def) ~ grade + home_ownership +
emp_length + purpose + is_inc_v + log(annual_inc) + log(loan_amnt) + dti,
type="classification", data=loans.split$Train, importance=TRUE)
randomForest(factor(loan_def) ~ annual_inc + dti + loan_amnt,
type="classification", data=loans.split$Train, importance=TRUE, na.action=na.omit)
randomForest(factor(loan_def) ~ annual_inc + dti + loan_amnt,
type="classification", data=loans.split$Train, importance=TRUE, na.action=na.omit)
randomForest(factor(loan_def) ~ annual_inc + dti + loan_amnt,
type="classification", data=loans.split$Train, importance=TRUEna.omit)
randomForest(factor(loan_def) ~ annual_inc + dti + loan_amnt,
type="classification", data=loans.split$Train, importance=TRUE)
train.forest()
randomForest(factor(loan_def) ~ annual_inc + dti + loan_amnt + grade,
type="classification", data=loans.split$Train, importance=TRUE)
predict(randomForest(factor(loan_def) ~ annual_inc + dti + loan_amnt,
type="classification", data=loans.split$Train, importance=TRUE), newdata = loans.split$Test, type = 'class')
forest.results <- table(predict(randomForest(factor(loan_def) ~ annual_inc + dti + loan_amnt,
type="classification", data=loans.split$Train, importance=TRUE), newdata = loans.split$Test, type = 'class')
, loans.split$Test[, 'loan_def'])
forest.results
sum(diag(forest.results))/nrow(loans.split$Test)
results()
ggplot(loans.split$Train) + geom_bar(aes(x = purpose, y = sum(loan_def)/sum(..count..)), stat = 'identity')
ggplot(loans.split$Train) + geom_bar(aes(x = purpose, y = sum(loan_def)), stat = 'identity')
ddply(loans.split$Train, .(purpose), summarise, NLoans = nrow(piece), NDefaults = sum(loan_def))
ggplot(ddply(loans.split$Train, .(purpose), summarise, NLoans = nrow(piece), NDefaults = sum(loan_def))) + geom_bar(aes(x = purpose, y = NDefaults/NLoans), stat = 'identity')
head(lstats.x)
table(lstats.x$purpose)
table(lstats.x$is_inc_v)
head(lstats.x)
data.edit <- function(loans.data = lstats.x) {
loans.data$home_own <- ifelse(loans.data$home_ownership %in% c("OWN", "MORTGAGE"),
1, 0)
loans.data$employed <- ifelse(loans.data$emp_length %in% c("<1 year", "n/a"),
0, 1)
loans.data$small.biz <- ifelse(loans.data$purpose == "small business")
loans.data$verify <- ifelse(loans.data$is_inc_v %in% c("Verified", "Source Verified"),
1, 0)
return(loans.data[, c("verify", "small.biz", "employed", "home.own",
"dti", "annual_inc", "dti", "loan_amnt")])
}
head(data.edit())
data.edit <- function(loans.data = lstats.x) {
loans.data$home_own <- ifelse(loans.data$home_ownership %in% c("OWN", "MORTGAGE"),
1, 0)
loans.data$employed <- ifelse(loans.data$emp_length %in% c("<1 year", "n/a"),
0, 1)
loans.data$small.biz <- ifelse(loans.data$purpose == "small business", 1, 0)
loans.data$verify <- ifelse(loans.data$is_inc_v %in% c("Verified", "Source Verified"),
1, 0)
return(loans.data[, c("verify", "small.biz", "employed", "home.own",
"dti", "annual_inc", "dti", "loan_amnt")])
}
head(data.edit())
table(lstats.x$purpose)
data.edit <- function(loans.data = lstats.x) {
loans.data$home_own <- ifelse(loans.data$home_ownership %in% c("OWN", "MORTGAGE"),
1, 0)
loans.data$employed <- ifelse(loans.data$emp_length %in% c("<1 year", "n/a"),
0, 1)
loans.data$small.biz <- ifelse(loans.data$purpose == "small_business", 1, 0)
loans.data$verify <- ifelse(loans.data$is_inc_v %in% c("Verified", "Source Verified"),
1, 0)
return(loans.data[, c("verify", "small.biz", "employed", "home.own",
"dti", "annual_inc", "dti", "loan_amnt")])
}
table(lstats.x$purpose)
head(data.edit())
sum(lstats.x$purpose == "small_business")
data.edit <- function(loans.data = lstats.x) {
loans.data$home_own <- ifelse(loans.data$home_ownership %in% c("OWN", "MORTGAGE"),
1, 0)
loans.data$employed <- ifelse(loans.data$emp_length %in% c("<1 year", "n/a"),
0, 1)
loans.data$small.biz <- ifelse(loans.data$purpose == "small_business", 1, 0)
loans.data$verify <- ifelse(loans.data$is_inc_v %in% c("Verified", "Source Verified"),
1, 0)
return(loans.data[, c("verify", "small.biz", "employed", "home.own",
"dti", "annual_inc", "dti", "loan_amnt")])
}
head(data.edit())
data.edit <- function(loans.data = lstats.x) {
loans.data$home_own <- ifelse(loans.data$home_ownership %in% c("OWN", "MORTGAGE"),
1, 0)
loans.data$employed <- ifelse(loans.data$emp_length %in% c("<1 year", "n/a"),
0, 1)
loans.data$small.biz <- ifelse(loans.data$purpose == "small_business", 1, 0)
loans.data$verify <- ifelse(loans.data$is_inc_v %in% c("Verified", "Source Verified"),
1, 0)
return(loans.data)
}
head(data.edit())
table(lstats.x$grade)
data.edit <- function(loans.data = lstats.x) {
loans.data$home_own <- ifelse(loans.data$home_ownership %in% c("OWN", "MORTGAGE"),
1, 0)
loans.data$employed <- ifelse(loans.data$emp_length %in% c("<1 year", "n/a"),
0, 1)
loans.data$small.biz <- ifelse(loans.data$purpose == "small_business", 1, 0)
loans.data$verify <- ifelse(loans.data$is_inc_v %in% c("Verified", "Source Verified"),
1, 0)
loans.data$high.grade <- ifelse(loans.data$grade %in% c("A", "B"),
1, 0)
return(loans.data[, c("high.grade", "verify", "small.biz", "employed",
"home_own", "int_rate", "loan_amnt", "dti", "annual_inc",
"loan_def")])
}
head(data.edit())
run.forest <- function(lstats = data.edit()) {
splits <- split.data(lstats)
rf <- randomForest(factor(loan_def) ~ .,
data = splits$Train, importance = T, na.action = na.omit)
}
run.forest <- function(lstats = data.edit()) {
splits <- split.data(lstats)
rf <- randomForest(factor(loan_def) ~ .,
data = splits$Train, importance = T, na.action = na.omit)
return(rf)
}
run.forest()
forest.results <- function(lstats = data.edit()) {
splits <- split.data(lstats)
model <- run.forest()
predictions <- predict(run.forest(), splits$Test, type = 'class')
table.preds <- table(predictions, splits$Test[, 'loan_def'])
return(table.preds)
}
forest.results()
(396 + 8671) / ((396 + 8671) + (682 + 9))
library(ROCR)
install.packages('ROCR')
library(ROCR)
splits.loans.bin <- split.data(data.edit())
?prediction
prediction(predict(run.forest(), splits.loans.bin$Test, type = 'class'), splits.loans.bin$Test$loan_def)
pred.forest <- predict(run.forest(), splits.loans.bin$Test, type = 'class')
head(pred.forest)
prediction(pred.forest, splits.loans.bin$Test)
length(pred.forest)
dim(splits.loans.bin$Test)
prediction(pred.forest, splits.loans.bin$Test$loan_def)
View(pred.forest)
as.numeric(pred.forest$x)
as.numeric(pred.forest)
View(as.numeric(pred.forest))
head(pred.forest)
View(as.numeric(as.character(pred.forest)))
prediction(as.numeric(as.character(pred.forest)), splits.loans.bin$Test$loan_def)
performance(prediction(as.numeric(as.character(pred.forest)), splits.loans.bin$Test$loan_def), 'tpr', 'fpr')
plot(performance(prediction(as.numeric(as.character(pred.forest)), splits.loans.bin$Test$loan_def), 'tpr', 'fpr'))
forest.results()
(8686+318)/((8686+318) + (743 + 11))
ls()
pred.forest
table(pred.forest, splits.loans.bin$Test$loan_def)
sum(diag(table(pred.forest, splits.loans.bin$Test$loan_def)))
sum(diag(table(pred.forest, splits.loans.bin$Test$loan_def)))/nrow(splits.loans.bin$Test)
library(caret)
?confusionMatrix
confusionMatrix(pred.forest, reference = splits.loans.bin$Test$loan_def, positive = 1)
confusionMatrix(pred.forest, reference = splits.loans.bin$Test$loan_def, positive = "1")
install.packages('pROC')
library(pROC)
?roc
roc(splits.loans.bin$Test$loan_def, pred.forest)
roc(splits.loans.bin$Test$loan_def, pred.forest, levels = factor(splits.loans.bin$Test$loan_def, levels  c(0,1), labels = c("Current", "Default")))
roc(splits.loans.bin$Test$loan_def, pred.forest, levels = factor(splits.loans.bin$Test$loan_def, levels = c(0,1), labels = c("Current", "Default")))
roc(factor(splits.loans.bin$Test$loan_def), pred.forest, levels = factor(splits.loans.bin$Test$loan_def))
summary(pred.forst)
summary(pred.forest)
str(pred.forest)
str(splits.loans.bin$Test$loan_def)
roc(factor(splits.loans.bin$Test$loan_def), factor(pred.forest, levels = c(0,1), labels = c("0", "1")), levels = factor(splits.loans.bin$Test$loan_def))
roc(factor(splits.loans.bin$Test$loan_def), as.numeric(as.character(pred.forest)), levels = factor(splits.loans.bin$Test$loan_def))
auc(roc(factor(splits.loans.bin$Test$loan_def), as.numeric(as.character(pred.forest)), levels = factor(splits.loans.bin$Test$loan_def)))
plot(roc(factor(splits.loans.bin$Test$loan_def), as.numeric(as.character(pred.forest)), levels = factor(splits.loans.bin$Test$loan_def)))
prob.forest.pred <- predict(run.forest(), splits.loans.bin$Test, type = 'prob')
prediction(as.numeric(prob.forest.pred), splits.loans.bin$Test$loan_def)
prob.forest.pred
head(prob.forest.pred)
prediction(prob.forest.pred[, 2], splits.loans.bin$Test$loan_def)
performance(prediction(prob.forest.pred[, 2], splits.loans.bin$Test$loan_def), "tpr", "fpr")
plot(performance(prediction(prob.forest.pred[, 2], splits.loans.bin$Test$loan_def), "tpr", "fpr"), "ROC for Random Forest Default Prediction", col = 2, lwd = 2)
plot(performance(prediction(prob.forest.pred[, 2], splits.loans.bin$Test$loan_def), "tpr", "fpr"), main = "ROC for Random Forest Default Prediction", col = 2, lwd = 2)
importance(pred.forest)
plot(performance(prediction(prob.forest.pred[, 2], splits.loans.bin$Test$loan_def), "tpr", "fpr"), main = "ROC for Random Forest Default Prediction", col = 2, lwd = 2)
